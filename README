Tools to bridge GURPS tooling and provide automation.

GCS Constraints
---------------

1.  GCS has no API, must poll/watch file for changes.

MapTool constraints
-------------------

1.  MapTool can only make blocking HTTP GET requests
    that lock up the interface while ongoing.
2.  The best avenue for automation may be a bot that connects
    and speaks the MapTool protocol.
3.  User interface needs to be hand-coded,
    but can possibly operate by whispering messages to a bot.
4.  It is theoretically possible to have the bridge work
    by MapTool connect through it and update stats via MITM,
    which would have the benefit of not having a separate bot connection
    but would cause architectural problems if it got perfect E2E encryption.

Browser constraints
-------------------

1.  If at all possible, work with a static page.
2.  Must be able to connect to local services.
    1.  HTTPS is not possible as browsers refuse to accept self-signed certs
        we can't get a certificate for 127.0.0.1
        and setting up a local certification authority is a pain to integrate.
    2.  We need local services to not open up vulnerabilities
        from arbitrary pages being able to connect.
        COBR is the intended mechanism for this, but websockets don't handle it,
        and the official stance from browser upstreams is that websocket auth
        should be the responsibility of the application layer protocol,
        and rolling one's own security is prone to error.
        This limits the browser to HTTP requests and server-sent-events.
    3.  For file or localhost pages to make connections to local services
        COBR requires that the server return "*" since file origin is null.
        Authentication is required to prevent other services accessing,
        but at least it's an existing problem.

Design constraints
------------------

Must be cross platform,
so cross-compile to Windows with mingw-w64,
and use a web UI.


GCS file update:

GCS → Agent → MapTool Bridge → MapTool

Apply change in Agent UI

GCS ← Agent → MapTool Bridge → MapTool

Apply change in MapTool

GCS ← Agent ← MapTool Bridge ← MapTool

Components
==========

gcs-agent
---------

1.  Provide browsing API for GCS files.
2.  Allow the contents of a GCS file to be requested.
3.  Send notifications when files are changed.

webui
-----

1.  Do everything to aid in-person games that GCS doesn't do.
    1.  HP/FP/ER tracking.
    2.  Apply damage from hits.
    3.  Track modifiers for roll targets.
2.  A vehicle for prototyping features far GCS.
    1.  Need to track more complex DR.
    2.  Need to encode which of alternative abilities are active.
3.  Provide interface for configuring other components.

Future plans
============

*   Allow WebUI to change stats and save them.
*   Handle FP in WebUI
    *   Read FP from sheets
    *   Modify state and request write on FP change
*   Allow storing ER in third-party area
    *   Calculate Energy Reserves from enabled named advantage levels
    *   Render Energy Reserve widgets in WebUI
    *   Modify state and request write on ER change
*   Bridge to MapTool
    *   Implement any missing parts of https://crates.io/crates/hessian_rs
    *   Test client that takes credentials from command-line
        and logs messages from server.
    *   Implement minimum logic to parse messages to know when
        token states have changed.
    *   If token is owned by the bridge report its state.
    *   Change client to have an HTTP interface.
        *   Report state changes via SSE.
        *   Accept requests with provided Name + Stats
            and send messages to update all tokens with matching name
            that are owned by the bridge.
*   Interface for rolling
    *   Calculate effective levels for attributes, skills and spells.
    *   Add button that sends roll through MapTool bridge.
*   GCS file watcher to offer to reload on change.
    *   May re-check on-focus if easier.
*   MapTool fix UPnP-IGD
*   MapTool URI scheme to provide MapTool launch and quick-join URL.
*   Interface for draining energy
    *   Dialogue for picking from energy pools.
*   Interface for casting spells
    *   Count levels of Life-Force Burn perk
    *   Integrate with using energy UI, HP spent above Life-Force burn modifier
    *   Add number field for increasing effective skill by increasing energy.
*   Per-source UI for FP and HP damage
    *   Store an ordered sequence of damage by source
    *   Render as vertical gradient bar chart.
        1.  Initially filled, with colour dependant on energy type
            (Red for HP, Green for FP, Bluish-purple for QP,
            Blue for Energy Reserve (Magical),
            Dark Red for Energy Reserve (Blood),
            Reddish-purple for Energy Reserve (Psionic)).
        2.  Damage replaces a region of the filled bar at the top.
        3.  Newer damage is added above older damage,
            it "grows down" and is healed LIFO.
        4.  Damage not healable by generic healing is sorted above.
        5.  Generic healing removes damage from the bottom first.
        6.  Limited healing skips over damage it can't heal.
        7.  FP extends below 0 to -1×FP, HP to -5×HP if not Unkillable,
            to -10× if Unkillable.
    *   Store "damage" value in third_party area and if thirdparty value differs
        prompt for user to rationalise.
*   Tools for automatic peer-to-peer connectivity with per-device domain name.
    1.  Client that reacts to current network connection state,
        uses UPnP-IGD/PCP connect to router and find external IP addresses,
        updates A record at https://dynv6.com/ to point to current address.
    2.  When service is started, client requests port forwarding from router.
        1.  If non-http server add a SRV record via dynv6 API referencing port.
        2.  If http server, use pre-configured CNAME www.$domain
            pointing to a HTTP redirect service.
            1.  If a better one can't be found can redirect with GitHub pages
                by pushing a static html document to page that uses an html
                meta-equiv tag.
            2.  A generic site might use
                https://developers.google.com/speed/public-dns/docs/doh/json
                and make a DNS request via window.fetch
                then forward via javascript
        When finished port forwarding is removed.
    3.  MapTool client makes SRV lookups.
    4.  Special-purpose VPN endpoint that implements UPnP-IGD/NAT-PMP/PCP
        so that in a less permissible network you can get a reachable address.
*   Use ReadableStream on fetch response instead of SSE for watch notification.
*   Use ServiceWorker to sit in-between fetches and provide an offline mode.
*   Move watch logic into a SharedWorker that broadcasts file changes
    so app can work in multiple tabs.
*   Turn into a Progressive Web App and use native fs access,
    in preparation for future notification support,
    and in the meantime can re-scan on focus change.
*   Relay WebPush credentials via MapTool bridges
    so GM server start sends push notification to players.
