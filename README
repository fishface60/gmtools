Tools to bridge GURPS tooling and provide automation.

GCS Constraints
---------------

1.  GCS has no API, must poll/watch file for changes.

MapTool constraints
-------------------

1.  MapTool can only make blocking HTTP GET requests
    that lock up the interface while ongoing.
2.  The best avenue for automation may be a bot that connects
    and speaks the MapTool protocol.
3.  User interface needs to be hand-coded,
    but can possibly operate by whispering messages to a bot.
4.  It is theoretically possible to have the bridge work
    by MapTool connect through it and update stats via MITM,
    which would have the benefit of not having a separate bot connection
    but would cause architectural problems if it got perfect E2E encryption.

Browser constraints
-------------------

1.  If at all possible, work with a static page.
2.  Must be able to connect to local services.
    1.  HTTPS is not possible as browsers refuse to accept self-signed certs
        we can't get a certificate for 127.0.0.1
        and setting up a local certification authority is a pain to integrate.
    2.  We need local services to not open up vulnerabilities
        from arbitrary pages being able to connect.
        COBR is the intended mechanism for this, but websockets don't handle it,
        and the official stance from browser upstreams is that websocket auth
        should be the responsibility of the application layer protocol,
        and rolling one's own security is prone to error.
        This limits the browser to HTTP requests and server-sent-events.
    3.  For file or localhost pages to make connections to local services
        COBR requires that the server return "*" since file origin is null.
        Authentication is required to prevent other services accessing,
        but at least it's an existing problem.

Design constraints
------------------

Must be cross platform,
so cross-compile to Windows with mingw-w64,
and use a web UI.


GCS file update:

GCS → Agent → MapTool Bridge → MapTool

Apply change in Agent UI

GCS ← Agent → MapTool Bridge → MapTool

Apply change in MapTool

GCS ← Agent ← MapTool Bridge ← MapTool

Components
==========

gcs-agent
---------

1.  Provide browsing API for GCS files.
2.  Allow the contents of a GCS file to be requested.
3.  Send notifications when files are changed.

webui
-----

1.  Do everything to aid in-person games that GCS doesn't do.
    1.  HP/FP/ER tracking.
    2.  Apply damage from hits.
    3.  Track modifiers for roll targets.
2.  A vehicle for prototyping features far GCS.
    1.  Need to track more complex DR.
    2.  Need to encode which of alternative abilities are active.
3.  Provide interface for configuring other components.

Future plans
============

1.  Bridge to MapTool
2.  GCS file watcher to offer to reload on change.
3.  MapTool URI scheme to provide MapTool launch and quick-join URL.
4.  Tools for automatic peer-to-peer connectivity with per-device domain name.
    1.  Client that reacts to current network connection state,
        uses UPnP-IGD/PCP connect to router and find external IP addresses,
        updates A record at https://dynv6.com/ to point to current address.
    2.  When service is started, client requests port forwarding from router.
        1.  If non-http server add a SRV record via dynv6 API referencing port.
        2.  If http server, use pre-configured CNAME www.$domain
            pointing to a HTTP redirect service.
            1.  If a better one can't be found can redirect with GitHub pages
                by pushing a static html document to page that uses an html
                meta-equiv tag.
            2.  A generic site might use
                https://developers.google.com/speed/public-dns/docs/doh/json
                and make a DNS request via window.fetch
                then forward via javascript
        When finished port forwarding is removed.
    3.  MapTool client makes SRV lookups.
